// <auto-generated />
using System;
using DD_Server.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DD_Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240215111635_create3")]
    partial class create3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DD_Server.Model.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.Property<string>("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DD_Server.Model.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalculatedInfo")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<Guid>("DId")
                        .HasColumnType("uuid");

                    b.Property<string>("DataPoint")
                        .HasColumnType("text");

                    b.Property<string>("DbColumnName")
                        .HasColumnType("text");

                    b.Property<string>("DbDataType")
                        .HasColumnType("text");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("FieldType")
                        .HasColumnType("text");

                    b.Property<string[]>("PossibleValues")
                        .HasColumnType("text[]");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Synonyms")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("DD_Server.Model.Dictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalculatedInfo")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<string>("DataPoint")
                        .HasColumnType("text");

                    b.Property<string>("DbColumnName")
                        .HasColumnType("text");

                    b.Property<string>("DbDataType")
                        .HasColumnType("text");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("FieldType")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string[]>("PossibleValues")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Synonyms")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Dictionary");
                });

            modelBuilder.Entity("DD_Server.Model.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalculatedInfo")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<Guid>("DId")
                        .HasColumnType("uuid");

                    b.Property<string>("DataPoint")
                        .HasColumnType("text");

                    b.Property<string>("DbColumnName")
                        .HasColumnType("text");

                    b.Property<string>("DbDataType")
                        .HasColumnType("text");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("FieldType")
                        .HasColumnType("text");

                    b.Property<string[]>("PossibleValues")
                        .HasColumnType("text[]");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Synonyms")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DD_Server.Model.Audit", b =>
                {
                    b.HasOne("DD_Server.Model.AppUser", "user")
                        .WithMany("Audits")
                        .HasForeignKey("UId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DD_Server.Model.Request", b =>
                {
                    b.HasOne("DD_Server.Model.AppUser", "user")
                        .WithMany("Requests")
                        .HasForeignKey("UId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DD_Server.Model.AppUser", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
